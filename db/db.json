{
  "admins": [
    {
      "firstName": "Rahul",
      "lastName": "Dudhane",
      "email": "rahul.y.dudhane@gmail.com",
      "role": "admin",
      "password": "rahuld123",
      "id": 1
    },
    {
      "firstName": "Uday",
      "lastName": "aditya",
      "email": "uday@gmail.com",
      "role": "admin",
      "password": "12345678",
      "id": 3
    },
    {
      "firstName": "Tanaya",
      "lastName": "Patil",
      "email": "tanaya@gmail.com",
      "role": "user",
      "password": "12345678",
      "id": 4
    },
    {
      "firstName": "udayaditya",
      "lastName": "Singh",
      "email": "udayaditya.singh@gmail.com",
      "role": "admin",
      "password": "12345678",
      "id": 5
    }
  ],
  "reviews": [
    {
      "name": "Let us c",
      "author": "Yashavant Kanetkar",
      "rating": "4",
      "ownerId": 1,
      "price": 220,
      "pages": 480,
      "review": "\"Today's challenges\" need \"Today's solutions\". The way this applies to real-word, it equally applies to programming world. To create solutions that meet today's expectations, one needs to use a modern language like C# and technology like .NET. learning C#.",
      "id": 2
    },
    {
      "ownerId": 1,
      "name": "Java: The Complete Reference",
      "author": "Herbert Schildt",
      "review": "In this completely up-to-date volume, Herb Schildt, the world's leading programming author, shows you everything you need to know to develop, compile, debug, and run Java applications and applets",
      "pages": "1198",
      "rating": 3,
      "price": "900",
      "id": 7
    },
    {
      "ownerId": 1,
      "name": "The Design of the UNIX Operating System",
      "author": "Maurice J. Bach.",
      "review": "The UNIX system was first described in a 1974 paper in the Communications of the ACM Thompson 74 by Ken Thompson and Dennis Ritchie. Since that time, it has become increasingly widespread and popular throughout the computer industry where more and more vendors are offering support for it on their machines. It is especially popular in universities where it is frequently used for operating systems research and case studies.\n\nMany books and papers have described parts of the system, among them, two special issues of the Bell System Technical Journal in 1978 BSTJ 78 and 1984 BLTJ 84. Many books describe the user level interface, particularly how to use electronic mail, how to prepare documents, or how to use the command interpreter called the shell; some books such as The UNIX Programming Environment Kernighan 84 and Advanced UNIX Programming Rochkind 85 describe the programming interface. This book describes the internal algorithms and structures that form the basis of the operating system (called the kernel) and their relationship to the programmer interface. It is thus applicable to several environments. First, it can be used as a textbook for an operating systems course at either the advanced undergraduate or first-year graduate level. It is most beneficial to reference the system source code when using the book, but the book can be read independently, too. Second, system programmers can use the book as a reference to gain better understanding of how the kernel works and to compare algorithms used in the UNIX system to algorithms used in other operating systems.\n\nFinally, programmers on UNIX systems can gain a deeper understanding of how their programs interact with the system and thereby code more-efficient, sophisticated programs.\n\nThe material and organization for the book grew out of a course that I prepared and taught at AT&T Bell Laboratories during 1983 and 1984. While the course centered on reading the source code for the system, I found that understanding the code was easier once the concepts of the algorithms had been mastered. I have attempted to keep the descriptions of algorithms in this book as simple as possible, reflecting in a small way the simplicity and elegance of the system it describes. Thus, the book is not a line-by-line rendition of the system written in English; it is a description of the general flow of the various algorithms, and most important, a description of how they interact with each other. Algorithms are presented in a C-like pseudo-code to aid the reader in understanding the natural language description, and their names correspond to the procedure names in the kernel. Figures depict the relationship between various data structures as the system manipulates them. In later chapters, small C programs illustrate many system concepts as they manifest themselves to users. In the interests of space and clarity, these examples do not usually check for error conditions, something that should always be done when writing programs. I have run them on System V; except for programs that exercise features specific to System V, they should run on other versions of the system, too.\n\nMany exercises originally prepared for the course have been included at the end of each chapter, and they are a key part of the book. Some exercises are straightforward, designed to illustrate concepts brought out in the text. Others are more difficult, designed to help the reader understand the system at a deeper level. Finally, some are exploratory in nature, designed for investigation as a research problem. Difficult exercises are marked with asterisks.",
      "pages": "471",
      "rating": 3,
      "price": "545",
      "id": 8
    },
    {
      "ownerId": 4,
      "name": "The C Programming Language",
      "author": "Brian W. Kernighan / Dennis Ritchie",
      "review": "The book enumerates the concepts related to C Programming language, as prescribed by ANSI standard. The book elaborates on the basics of procedure oriented programming and the fundamentals of writing C codes. It goes on to cover aspects like functions and loops, learning which will help novice programmers to code elementary level codes properly.\n\nconcepts Covered\nEach concept is covered using tracing to explain how the particular coding element works, real- time programs to help users understand how to implement learned concepts and computerized outputs to assure validity of programs written. Elementary programming concepts like arrays, loops, assignment statements and operators, functions, file processing, data structures, etc. have been covered in the book. Solved and unsolved questions have been provided to help programmers develop an expertise in writing C codes flawlessly. Error correction exercises, code modification exercises and several such skill-testing exercised have been provided to help students analyse their understanding and knowledge. Model questions have been provided as per examination pattern to help students test themselves.\n\nAbout The Author\nBrian Willis Kernighan, born on 1 January, 1942, is a Canadian computer scientist who is responsible for the development and authoring of the AWK and AMPL programming languages. He also worked in developed UNIX, while he was a part of Bell Labs. Kernighan became renowned by co-authoring the book, The C Programming Language, along with Dennis Ritchie, who also worked in the development project of UNIX. He is currently the Computer Science Professor at Princeton University and has a huge number of accolades to his credit.\n\nThe book is available online for convenient shopping. You can bag this book from Amazon.in today by following a few easy steps.",
      "pages": 288,
      "rating": 4,
      "price": 233,
      "id": 9
    }
  ]
}